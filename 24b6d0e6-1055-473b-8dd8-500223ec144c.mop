{
  "Name": "MidiInput",
  "_id": "24b6d0e6-1055-473b-8dd8-500223ec144c",
  "Namespace": "lib.basic",
  "Description": "Returns the value of the specified midi control.\r\nTo teach the control trigger the TeachTrigger and change the desired control on the midi input device.",
  "Inputs": [
    {
      "Name": "TeachTrigger",
      "MetaInstanceID": "28fec471-0f32-48d1-86d5-e3c855fce78e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Device",
      "MetaInstanceID": "6b78105f-e4ce-431a-a723-6f254a9183c7",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Channel",
      "MetaInstanceID": "04c43b36-1c66-455b-9195-01ab48ad15e6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Control",
      "MetaInstanceID": "d75969b2-adfe-473d-9b9e-09b9469814ce",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "7b83fb9c-b8d4-498c-af0f-4e39ffdc800c",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "05713643-a205-405b-9332-b92f6e3fadb4",
      "MetaID": "63cbf741-7e64-4153-a210-891042fa7161",
      "Name": "MidiInputFunc",
      "Version": "3a42b7f4-325a-4b1a-9561-a2287a68808b",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using Midi;",
        "",
        "",
        "namespace Framefield.Core.ID63cbf741_7e64_4153_a210_891042fa7161",
        "{",
        "    public class Class_MidiInput : OperatorPart.Function, Framefield.Core.OperatorPartTraits.IAsyncDependend",
        "    {",
        "        public bool AsyncChanged { get { return _asyncChanged; } }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TeachTrigger = 0,",
        "            Device = 1,",
        "            Channel = 2,",
        "            Control = 3",
        "        }",
        "        //<<< _inputids ",
        "",
        "        public Class_MidiInput()",
        "        {",
        "            OpenAllInputDevices();",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            CloseAllInputDevices();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var TeachTrigger = inputs[(int)InputId.TeachTrigger].Eval(context).Value;",
        "            var Device = inputs[(int)InputId.Device].Eval(context).Text;",
        "            var Channel = inputs[(int)InputId.Channel].Eval(context).Value;",
        "            var Control = inputs[(int)InputId.Control].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            _asyncChanged = false;",
        "",
        "            bool teachTriggerFlankUp = _oldTeachTrigger < 0.5f && TeachTrigger > 0.5f;",
        "            _oldTeachTrigger = TeachTrigger;",
        "            if (teachTriggerFlankUp)",
        "            {",
        "                _teachingActive = true;",
        "                _lastMessage = null;",
        "                _currentValue = 0;",
        "            }",
        "",
        "            if (_lastMessage != null)",
        "            {",
        "                lock (this)",
        "                {",
        "                    if (_teachingActive)",
        "                    {",
        "                        inputs[(int)InputId.Device].Func = Utilities.CreateValueFunction(new Text(_lastMessage.Device.Name));",
        "                        inputs[(int)InputId.Channel].Func = Utilities.CreateValueFunction(new Float((float)_lastMessage.Channel));",
        "                        inputs[(int)InputId.Control].Func = Utilities.CreateValueFunction(new Float((float)_lastMessage.Control));",
        "                        _teachingActive = false;",
        "                    }",
        "",
        "                    if ((String.IsNullOrEmpty(Device) || _lastMessage.Device.Name == Device) &&",
        "                        ((int)Channel < 0 || (int)_lastMessage.Channel == (int)Channel) &&",
        "                        ((int)Control < 0 || (int)_lastMessage.Control == (int)Control))",
        "                    {",
        "                        _currentValue = _lastMessage.Value;",
        "                    }",
        "                }",
        "            }",
        "",
        "            context.Value = _currentValue;",
        "            return context;",
        "        }",
        "",
        "        public void OpenAllInputDevices()",
        "        {",
        "            CloseAllInputDevices();",
        "",
        "            foreach (var device in InputDevice.InstalledDevices)",
        "            {",
        "                try",
        "                {",
        "                    if (!device.IsOpen)",
        "                        device.Open();",
        "                    if (!device.IsOpen)",
        "                        Logger.Error(\"MidiInput: Failed to open midi input device {0}\", device.Name);",
        "                    if (!device.IsReceiving)",
        "                        device.StartReceiving(null);",
        "                    if (!device.IsReceiving)",
        "                        Logger.Error(\"MidiInput: failed to start message receiving of midi input device {0}\", device.Name);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(\"MidiInput: failed to open input device: {0}\", e.Message);",
        "                }",
        "                device.ControlChange += new InputDevice.ControlChangeHandler(this.ControlChange);",
        "                _inputDevices.Add(device);",
        "            }",
        "            Logger.Info(\"MidiInput: number of opened midi input devices: {0}\", _inputDevices.Count);",
        "",
        "            _currentValue = 0;",
        "        }",
        "",
        "        public void CloseAllInputDevices()",
        "        {",
        "            _currentValue = 0;",
        "            foreach (var device in _inputDevices)",
        "            {",
        "                try",
        "                {",
        "                    device.StopReceiving();",
        "                    device.Close();",
        "                    device.RemoveAllEventHandlers();",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(\"MidiInput: failed to close input device: {0}\", e.Message);",
        "                }",
        "            }",
        "            _inputDevices.Clear();",
        "        }",
        "",
        "        public void ControlChange(ControlChangeMessage msg)",
        "        {",
        "            lock (this)",
        "            {",
        "                _lastMessage = msg;",
        "                _asyncChanged = true;",
        "            }",
        "        }",
        "",
        "",
        "        bool _asyncChanged = false;",
        "        List<InputDevice> _inputDevices = new List<InputDevice>();",
        "        float _oldTeachTrigger = 0;",
        "        bool _teachingActive = false;",
        "        ControlChangeMessage _lastMessage;",
        "        float _currentValue;",
        "    }",
        "",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "Libs/Midi.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "05713643-a205-405b-9332-b92f6e3fadb4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7b83fb9c-b8d4-498c-af0f-4e39ffdc800c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "28fec471-0f32-48d1-86d5-e3c855fce78e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "05713643-a205-405b-9332-b92f6e3fadb4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6b78105f-e4ce-431a-a723-6f254a9183c7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "05713643-a205-405b-9332-b92f6e3fadb4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "04c43b36-1c66-455b-9195-01ab48ad15e6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "05713643-a205-405b-9332-b92f6e3fadb4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d75969b2-adfe-473d-9b9e-09b9469814ce",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "05713643-a205-405b-9332-b92f6e3fadb4"
    }
  ]
}