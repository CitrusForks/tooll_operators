{
  "Name": "GroupMesh",
  "_id": "4969bad0-3188-4f28-ba51-bc3950239bef",
  "Namespace": "lib.3d.mesh",
  "Description": "Groups any number of incoming meshes.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "e5c94cb3-aa3b-4506-9161-cd188855e25b",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        vertex.pos.xyz = mul(vertex.pos, objectToWorldMatrix).xyz;\r",
          "        vertex.normal.xyz = mul(vertex.normal, objectToWorldMatrix).xyz;\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InputMeshes",
      "MetaInstanceID": "38511150-9e0d-424a-9418-0800e762206d",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "33569a4c-7c6d-4693-8616-d63e1ab82791",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ab36042f-1564-45ab-be4d-b2c68ebb9669",
      "MetaID": "076eed96-398d-4ad4-88e6-089af155920c",
      "Name": "GroupMeshFunc",
      "Version": "186c9721-cfe5-4953-9a0f-1ae3436bd7bb",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.Direct3D;",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID076eed96_398d_4ad4_88e6_089af155920c",
        "{",
        "    public class Class_GroupMesh : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            InputMeshes = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_GroupMesh()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _bakedMesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _bakedMesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Failed: {0}\", exception.Message);",
        "            }",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval) ",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "",
        "            if (!Changed && _bakedMesh.Vertices != null)",
        "                return;",
        "",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var InputMeshes = inputs[(int)InputId.InputMeshes];",
        "            ",
        "",
        "            if( InputMeshes.Connections.Count == 0) {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                return;            ",
        "            }",
        "                        ",
        "            _bakedMesh.NumTriangles = 0;",
        "            Mesh mesh = null;",
        "            ",
        "            var evaluatedMeshes = new List<Mesh>();",
        "            ",
        "            foreach( var input in InputMeshes.Connections) ",
        "            {",
        "                mesh = input.Eval(context).Mesh;",
        "                evaluatedMeshes.Add( mesh);",
        "                _bakedMesh.NumTriangles += mesh.NumTriangles;",
        "            }",
        "            ",
        "            _bakedMesh.AttributesSize = mesh.AttributesSize;",
        "            _bakedMesh.InputElements = mesh.InputElements;",
        "",
        "            if (_bakedMesh.Vertices == null || _bakedMesh.Vertices.Description.SizeInBytes != mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                _bakedMesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = _bakedMesh.NumTriangles*_bakedMesh.AttributesSize*3,",
        "                                                                      Usage = ResourceUsage.Default",
        "                                                                  });",
        "            }",
        "",
        "            var byteOffset = 0;",
        "            foreach( var evaluatedMesh in evaluatedMeshes) ",
        "            {                ",
        "                //CopySubresourceRegion(Resource source, int sourceSubresource, ResourceRegion? sourceRegion, Resource destination, int destinationSubResource, int dstX = 0, int dstY = 0, int dstZ = 0);",
        "                context.D3DDevice.ImmediateContext.CopySubresourceRegion(evaluatedMesh.Vertices, 0, null,  _bakedMesh.Vertices, 0, byteOffset);",
        "                byteOffset += evaluatedMesh.NumTriangles * evaluatedMesh.AttributesSize * 3;",
        "                ",
        "            }",
        "",
        "",
        "/*",
        "            var rotation = Quaternion.RotationYawPitchRoll(MathUtil.DegreesToRadians(RotateY),",
        "                                                           MathUtil.DegreesToRadians(RotateX),",
        "                                                           MathUtil.DegreesToRadians(RotateZ));",
        "",
        "            var transform = Matrix.Transformation(Pivot, Quaternion.Zero, Scale, Pivot, rotation, Translate);",
        "",
        "            var matrixEffectVariable = _effect.GetVariableByName(\"objectToWorldMatrix\").AsMatrix();",
        "            matrixEffectVariable.SetMatrix(transform);",
        "",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "",
        "            int streamOutputOffset = 0;",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_bakedMesh.Vertices, streamOutputOffset) });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(inputMesh.NumTriangles*3, 0);",
        "            streamOutputOffset += inputMesh.AttributesSize*inputMesh.NumTriangles*3;",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "*/",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ab36042f-1564-45ab-be4d-b2c68ebb9669",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "33569a4c-7c6d-4693-8616-d63e1ab82791"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e5c94cb3-aa3b-4506-9161-cd188855e25b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ab36042f-1564-45ab-be4d-b2c68ebb9669"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "38511150-9e0d-424a-9418-0800e762206d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ab36042f-1564-45ab-be4d-b2c68ebb9669"
    }
  ]
}